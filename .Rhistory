# Save the merged data to an RDS file for future use
saveRDS(all_data, rds_file)
}
# 将 all_data 转换为 data.table 对象
all_data <- as.data.table(all_data)
# 使用data.table语法过滤特定时间范围内的数据
all_data <- all_data[hour(Timestamp) >= 9 & (hour(Timestamp) < 16 | (hour(Timestamp) == 16 & minute(Timestamp) == 0))]
# 排序
setorder(all_data, Timestamp)
# Calculate daily data
daily_data <- all_data[, list(
Open = Open[1],
High = max(High),
Low = min(Low),
Close = Close[.N]
), by = .(Date = as.Date(Timestamp))]
# Calculate the gap and gap fill percentage
daily_data[, Gap := shift(Close, type = "lag") - Open]
daily_data[, GapSizePercentage := (Gap / shift(Close, type = "lag")) * 100]
daily_data[, GapFillPercentage := dplyr::case_when(
Gap > 0 ~ (Low - Open) / Gap * 100,
Gap < 0 ~ (High - Open) / abs(Gap) * 100,
TRUE ~ NA_real_
)]
daily_data <- daily_data[abs(GapSizePercentage) > 0.1& abs(GapSizePercentage) <2, ]
# Remove NA values
daily_data <- daily_data[!is.na(GapFillPercentage)]
# 加载所需的库
library(ggplot2)
# 添加新的分类条件来分类 GapFillPercentage
daily_data[, FillCategory := case_when(
Gap > 0 & GapFillPercentage < -100 ~ "Positive Gap, Fill < -100%",
Gap > 0 & GapFillPercentage >= -100 ~ "Positive Gap, Fill >= -100%",
Gap < 0 & GapFillPercentage > 100 ~ "Negative Gap, Fill > 100%",
Gap < 0 & GapFillPercentage <= 100 ~ "Negative Gap, Fill <= 100%",
TRUE ~ NA_character_
)]
# 加载所需的库
library(plotly)
# 根据 FillCategory 计算每个类别的数量
category_counts <- table(daily_data$FillCategory)
# 创建一个交互式的饼图
plot <- plot_ly(labels = names(category_counts), values = as.vector(category_counts), type = 'pie') %>%
layout(title = "Gap and Gap Fill Percentage Categories",
showlegend = T)
# 打印图表
plot
# 指定类别的顺序
ordered_categories <- c("Negative Gap, Fill < 100%", "Negative Gap, Fill >= 100%",
"Positive Gap, Fill < 100%", "Positive Gap, Fill >= 100%")
# 使用 factor 函数并设置 levels 参数
daily_data$Category <- factor(daily_data$Category, levels = ordered_categories)
# 加载所需的库
library(plotly)
# 根据 FillCategory 计算每个类别的数量
category_counts <- table(daily_data$FillCategory)
# 创建一个交互式的饼图
plot <- plot_ly(labels = names(category_counts), values = as.vector(category_counts), type = 'pie') %>%
layout(title = "Gap and Gap Fill Percentage Categories",
showlegend = T)
# 打印图表
plot
# Load required libraries
library(data.table)
library(plotly)
library(purrr)
library(readr)
library(magrittr)
library(tidyr)
library(dplyr)
folder_path <- "G://trading/QQQ/"
rds_file <- "G://trading/QQQ/all_data.rds"
# Check if the RDS file exists
if (file.exists(rds_file)) {
# Load data from RDS file
all_data <- readRDS(rds_file)
} else {
# Get all CSV files in the folder
all_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Read and merge all CSV files
all_data <- map_df(all_files, read_csv)
# Save the merged data to an RDS file for future use
saveRDS(all_data, rds_file)
}
# 将 all_data 转换为 data.table 对象
all_data <- as.data.table(all_data)
# 使用data.table语法过滤特定时间范围内的数据
all_data <- all_data[hour(Timestamp) >= 9 & (hour(Timestamp) < 16 | (hour(Timestamp) == 16 & minute(Timestamp) == 0))]
# 排序
setorder(all_data, Timestamp)
# Calculate daily data
daily_data <- all_data[, list(
Open = Open[1],
High = max(High),
Low = min(Low),
Close = Close[.N]
), by = .(Date = as.Date(Timestamp))]
# Calculate the gap and gap fill percentage
daily_data[, Gap := shift(Close, type = "lag") - Open]
daily_data[, GapSizePercentage := (Gap / shift(Close, type = "lag")) * 100]
daily_data[, GapFillPercentage := dplyr::case_when(
Gap > 0 ~ (Low - Open) / Gap * 100,
Gap < 0 ~ (High - Open) / abs(Gap) * 100,
TRUE ~ NA_real_
)]
daily_data <- daily_data[abs(GapSizePercentage) > 0.1& abs(GapSizePercentage) <2, ]
# Remove NA values
daily_data <- daily_data[!is.na(GapFillPercentage)]
# 加载所需的库
library(ggplot2)
# 添加新的分类条件来分类 GapFillPercentage
daily_data[, FillCategory := case_when(
Gap > 0 & GapFillPercentage < -100 ~ "Positive Gap, Fill < -100%",
Gap > 0 & GapFillPercentage >= -100 ~ "Positive Gap, Fill >= -100%",
Gap < 0 & GapFillPercentage > 100 ~ "Negative Gap, Fill > 100%",
Gap < 0 & GapFillPercentage <= 100 ~ "Negative Gap, Fill <= 100%",
TRUE ~ NA_character_
)]
# 指定类别的顺序
ordered_categories <- c("Negative Gap, Fill < 100%", "Negative Gap, Fill >= 100%",
"Positive Gap, Fill < 100%", "Positive Gap, Fill >= 100%")
# 使用 factor 函数并设置 levels 参数
daily_data$Category <- factor(daily_data$Category, levels = ordered_categories)
# 加载所需的库
library(plotly)
# 根据 FillCategory 计算每个类别的数量
category_counts <- table(daily_data$FillCategory)
# 创建一个交互式的饼图
plot <- plot_ly(labels = names(category_counts), values = as.vector(category_counts), type = 'pie') %>%
layout(title = "Gap and Gap Fill Percentage Categories",
showlegend = T)
# 打印图表
plot
# 指定类别的顺序
ordered_categories <- c("Negative Gap, Fill < 100%", "Positive Gap, Fill < 100%"， "Negative Gap, Fill >= 100%", "Positive Gap, Fill >= 100%")
# 指定类别的顺序
ordered_categories <- c("Negative Gap, Fill < 100%", "Positive Gap, Fill < 100%"，
# 指定类别的顺序
ordered_categories <- c("Negative Gap, Fill < 100%", "Positive Gap, Fill < 100%", "Negative Gap, Fill >= 100%", "Positive Gap, Fill >= 100%")
# 使用 factor 函数并设置 levels 参数
daily_data$Category <- factor(daily_data$Category, levels = ordered_categories)
# 加载所需的库
library(plotly)
# 根据 FillCategory 计算每个类别的数量
category_counts <- table(daily_data$FillCategory)
# 创建一个交互式的饼图
plot <- plot_ly(labels = names(category_counts), values = as.vector(category_counts), type = 'pie') %>%
layout(title = "Gap and Gap Fill Percentage Categories",
showlegend = T)
# 打印图表
plot
# Load required libraries
library(data.table)
library(plotly)
library(purrr)
library(readr)
library(magrittr)
library(tidyr)
library(dplyr)
folder_path <- "G://trading/QQQ/"
rds_file <- "G://trading/QQQ/all_data.rds"
# Check if the RDS file exists
if (file.exists(rds_file)) {
# Load data from RDS file
all_data <- readRDS(rds_file)
} else {
# Get all CSV files in the folder
all_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Read and merge all CSV files
all_data <- map_df(all_files, read_csv)
# Save the merged data to an RDS file for future use
saveRDS(all_data, rds_file)
}
# 将 all_data 转换为 data.table 对象
all_data <- as.data.table(all_data)
# 使用data.table语法过滤特定时间范围内的数据
all_data <- all_data[hour(Timestamp) >= 9 & (hour(Timestamp) < 16 | (hour(Timestamp) == 16 & minute(Timestamp) == 0))]
# 排序
setorder(all_data, Timestamp)
# Calculate daily data
daily_data <- all_data[, list(
Open = Open[1],
High = max(High),
Low = min(Low),
Close = Close[.N]
), by = .(Date = as.Date(Timestamp))]
# Calculate the gap and gap fill percentage
daily_data[, Gap := shift(Close, type = "lag") - Open]
daily_data[, GapSizePercentage := (Gap / shift(Close, type = "lag")) * 100]
daily_data[, GapFillPercentage := dplyr::case_when(
Gap > 0 ~ (Low - Open) / Gap * 100,
Gap < 0 ~ (High - Open) / abs(Gap) * 100,
TRUE ~ NA_real_
)]
daily_data <- daily_data[abs(GapSizePercentage) > 0.1& abs(GapSizePercentage) <2, ]
# Remove NA values
daily_data <- daily_data[!is.na(GapFillPercentage)]
# 加载所需的库
library(ggplot2)
# 添加新的分类条件来分类 GapFillPercentage
daily_data[, FillCategory := case_when(
Gap > 0 & GapFillPercentage < -100 ~ "Positive Gap, Fill < -100%",
Gap > 0 & GapFillPercentage >= -100 ~ "Positive Gap, Fill >= -100%",
Gap < 0 & GapFillPercentage > 100 ~ "Negative Gap, Fill > 100%",
Gap < 0 & GapFillPercentage <= 100 ~ "Negative Gap, Fill <= 100%",
TRUE ~ NA_character_
)]
# 指定类别的顺序
ordered_categories <- c("Negative Gap, Fill < 100%", "Positive Gap, Fill < 100%", "Negative Gap, Fill >= 100%", "Positive Gap, Fill >= 100%")
# 使用 factor 函数并设置 levels 参数
daily_data$Category <- factor(daily_data$Category, levels = ordered_categories)
# 加载所需的库
library(plotly)
# 根据 FillCategory 计算每个类别的数量
category_counts <- table(daily_data$FillCategory)
# 创建一个交互式的饼图
plot <- plot_ly(labels = names(category_counts), values = as.vector(category_counts), type = 'pie') %>%
layout(title = "Gap and Gap Fill Percentage Categories",
showlegend = T)
# 打印图表
plot
# Load required libraries
library(data.table)
library(plotly)
library(purrr)
library(readr)
library(magrittr)
library(tidyr)
library(dplyr)
folder_path <- "G://trading/QQQ/"
rds_file <- "G://trading/QQQ/all_data.rds"
# Check if the RDS file exists
if (file.exists(rds_file)) {
# Load data from RDS file
all_data <- readRDS(rds_file)
} else {
# Get all CSV files in the folder
all_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Read and merge all CSV files
all_data <- map_df(all_files, read_csv)
# Save the merged data to an RDS file for future use
saveRDS(all_data, rds_file)
}
# Convert all_data to data.table object
setDT(all_data)
# Calculate daily data
daily_data <- all_data[, .(
Open = Open[1],
High = max(High),
Low = min(Low),
Close = Close[.N]
), by = .(Date = as.Date(Timestamp))]
# Calculate the gap and gap fill percentage
daily_data[, Gap := shift(Close, type = "lag") - Open]
daily_data[, GapFillPercentage := ifelse(
Gap > 0, (Low - Open) / Gap * 100,
(High - Open) / abs(Gap) * 100
)]
# Filter out the rows with NA values
daily_data <- daily_data[!is.na(GapFillPercentage)]
# Positive Gap Data
positive_gap_data <- daily_data[Gap > 0]
# Negative Gap Data
negative_gap_data <- daily_data[Gap < 0]
# Create Pie Chart for Positive Gap
positive_gap_counts <- positive_gap_data[, .(
GreaterThan100 = sum(GapFillPercentage > 100),
LessThan100 = sum(GapFillPercentage <= 100)
)]
# Create Pie Chart for Negative Gap
negative_gap_counts <- negative_gap_data[, .(
GreaterThan100 = sum(GapFillPercentage > 100),
LessThan100 = sum(GapFillPercentage <= 100)
)]
# Plot Positive Gap Pie Chart
positive_pie <- plot_ly(positive_gap_counts, labels = names(positive_gap_counts), values = positive_gap_counts$GreaterThan100, type = 'pie', textinfo = 'label+percent') %>%
layout(title = "Positive Gap Fill Percentage Distribution")
# Plot Negative Gap Pie Chart
negative_pie <- plot_ly(negative_gap_counts, labels = names(negative_gap_counts), values = negative_gap_counts$GreaterThan100, type = 'pie', textinfo = 'label+percent') %>%
layout(title = "Negative Gap Fill Percentage Distribution")
# Print the plots
positive_pie
negative_pie
positive_pie
negative_pie
positive_pie
negative_pie
# Load required libraries
library(data.table)
library(plotly)
library(purrr)
library(readr)
library(magrittr)
library(tidyr)
library(dplyr)
folder_path <- "G://trading/QQQ/"
rds_file <- "G://trading/QQQ/all_data.rds"
# Check if the RDS file exists
if (file.exists(rds_file)) {
# Load data from RDS file
all_data <- readRDS(rds_file)
} else {
# Get all CSV files in the folder
all_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Read and merge all CSV files
all_data <- map_df(all_files, read_csv)
# Save the merged data to an RDS file for future use
saveRDS(all_data, rds_file)
}
# 将 all_data 转换为 data.table 对象
all_data <- as.data.table(all_data)
# 使用data.table语法过滤特定时间范围内的数据
all_data <- all_data[hour(Timestamp) >= 9 & (hour(Timestamp) < 16 | (hour(Timestamp) == 16 & minute(Timestamp) == 0))]
# 排序
setorder(all_data, Timestamp)
# Calculate daily data
daily_data <- all_data[, list(
Open = Open[1],
High = max(High),
Low = min(Low),
Close = Close[.N]
), by = .(Date = as.Date(Timestamp))]
# Calculate the gap and gap fill percentage
daily_data[, Gap := shift(Close, type = "lag") - Open]
daily_data[, GapSizePercentage := (Gap / shift(Close, type = "lag")) * 100]
daily_data[, GapFillPercentage := dplyr::case_when(
Gap > 0 ~ (Low - Open) / Gap * 100,
Gap < 0 ~ (High - Open) / abs(Gap) * 100,
TRUE ~ NA_real_
)]
daily_data <- daily_data[abs(GapSizePercentage) > 0.1& abs(GapSizePercentage) <2, ]
# Remove NA values
daily_data <- daily_data[!is.na(GapFillPercentage)]
# Positive Gap Data
positive_gap_data <- daily_data[Gap > 0]
# Negative Gap Data
negative_gap_data <- daily_data[Gap < 0]
# Create Pie Chart for Positive Gap
positive_gap_counts <- positive_gap_data[, .(
GreaterThan100 = sum(GapFillPercentage > 100),
LessThan100 = sum(GapFillPercentage <= 100)
)]
# Create Pie Chart for Negative Gap
negative_gap_counts <- negative_gap_data[, .(
GreaterThan100 = sum(GapFillPercentage > 100),
LessThan100 = sum(GapFillPercentage <= 100)
)]
# Plot Positive Gap Pie Chart
positive_pie <- plot_ly(positive_gap_counts, labels = names(positive_gap_counts), values = positive_gap_counts$GreaterThan100, type = 'pie', textinfo = 'label+percent') %>%
layout(title = "Positive Gap Fill Percentage Distribution")
# Plot Negative Gap Pie Chart
negative_pie <- plot_ly(negative_gap_counts, labels = names(negative_gap_counts), values = negative_gap_counts$GreaterThan100, type = 'pie', textinfo = 'label+percent') %>%
layout(title = "Negative Gap Fill Percentage Distribution")
# Print the plots
positive_pie
negative_pie
positive_pie
# Load required libraries
library(data.table)
library(plotly)
library(purrr)
library(readr)
library(magrittr)
library(tidyr)
library(dplyr)
folder_path <- "G://trading/QQQ/"
rds_file <- "G://trading/QQQ/all_data.rds"
# Check if the RDS file exists
if (file.exists(rds_file)) {
# Load data from RDS file
all_data <- readRDS(rds_file)
} else {
# Get all CSV files in the folder
all_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Read and merge all CSV files
all_data <- map_df(all_files, read_csv)
# Save the merged data to an RDS file for future use
saveRDS(all_data, rds_file)
}
# 将 all_data 转换为 data.table 对象
all_data <- as.data.table(all_data)
# 使用data.table语法过滤特定时间范围内的数据
all_data <- all_data[hour(Timestamp) >= 9 & (hour(Timestamp) < 16 | (hour(Timestamp) == 16 & minute(Timestamp) == 0))]
# 排序
setorder(all_data, Timestamp)
# Calculate daily data
daily_data <- all_data[, list(
Open = Open[1],
High = max(High),
Low = min(Low),
Close = Close[.N]
), by = .(Date = as.Date(Timestamp))]
# Calculate the gap and gap fill percentage
daily_data <- daily_data %>%
mutate(
Gap = lead(Close) - Open,
GapSizePercentage = (Gap / lead(Close)) * 100,
GapFillPercentage = case_when(
Gap > 0 ~ (Low - Open) / Gap * 100,
Gap < 0 ~ (High - Open) / abs(Gap) * 100,
TRUE ~ NA_real_
),
GapType = case_when(
Gap > 0 ~ "Positive Gap",
Gap < 0 ~ "Negative Gap",
TRUE ~ NA_character_
),
FillType = case_when(
abs(GapFillPercentage) >= 100 ~ "Fill >= 100%",
abs(GapFillPercentage) < 100 ~ "Fill < 100%",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(GapType), !is.na(FillType))
# Separate data for positive and negative gaps
positive_gaps <- daily_data[Gap > 0, ]
negative_gaps <- daily_data[Gap < 0, ]
# Count the occurrences of each fill type for positive gaps
positive_counts <- positive_gaps %>%
group_by(FillType) %>%
summarise(Count = n())
# Count the occurrences of each fill type for negative gaps
negative_counts <- negative_gaps %>%
group_by(FillType) %>%
summarise(Count = n())
# Create a pie chart for positive gaps
positive_pie <- plot_ly(positive_counts, labels = ~FillType, values = ~Count, type = 'pie', textinfo = 'label+percent') %>%
layout(title = "Positive Gap Fill Percentage Distribution")
# Create a pie chart for negative gaps
negative_pie <- plot_ly(negative_counts, labels = ~FillType, values = ~Count, type = 'pie', textinfo = 'label+percent') %>%
layout(title = "Negative Gap Fill Percentage Distribution")
# Print the plots
positive_pie
negative_pie
positive_pie
# Load required libraries
library(data.table)
library(plotly)
library(purrr)
library(readr)
library(magrittr)
library(tidyr)
library(dplyr)
folder_path <- "G://trading/QQQ/"
rds_file <- "G://trading/QQQ/all_data.rds"
# Check if the RDS file exists
if (file.exists(rds_file)) {
# Load data from RDS file
all_data <- readRDS(rds_file)
} else {
# Get all CSV files in the folder
all_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Read and merge all CSV files
all_data <- map_df(all_files, read_csv)
# Save the merged data to an RDS file for future use
saveRDS(all_data, rds_file)
}
# 将 all_data 转换为 data.table 对象
all_data <- as.data.table(all_data)
# 使用data.table语法过滤特定时间范围内的数据
all_data <- all_data[hour(Timestamp) >= 9 & (hour(Timestamp) < 16 | (hour(Timestamp) == 16 & minute(Timestamp) == 0))]
# 排序
setorder(all_data, Timestamp)
# Calculate daily data
daily_data <- all_data[, list(
Open = Open[1],
High = max(High),
Low = min(Low),
Close = Close[.N]
), by = .(Date = as.Date(Timestamp))]
# Calculate the gap and gap fill percentage
daily_data <- daily_data %>%
mutate(
Gap = lead(Close) - Open,
GapSizePercentage = (Gap / lead(Close)) * 100,
GapFillPercentage = case_when(
Gap > 0 ~ (Low - Open) / Gap * 100,
Gap < 0 ~ (High - Open) / abs(Gap) * 100,
TRUE ~ NA_real_
),
GapType = case_when(
Gap > 0 ~ "Positive Gap",
Gap < 0 ~ "Negative Gap",
TRUE ~ NA_character_
),
FillType = case_when(
abs(GapFillPercentage) >= 100 ~ "Fill >= 100%",
abs(GapFillPercentage) < 100 ~ "Fill < 100%",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(GapType), !is.na(FillType))
# Separate data for positive and negative gaps
positive_gaps <- daily_data[Gap > 0, ]
negative_gaps <- daily_data[Gap < 0, ]
# Count the occurrences of each fill type for positive gaps
positive_counts <- positive_gaps %>%
group_by(FillType) %>%
summarise(Count = n())
# Count the occurrences of each fill type for negative gaps
negative_counts <- negative_gaps %>%
group_by(FillType) %>%
summarise(Count = n())
# Create a pie chart for positive gaps
positive_pie <- plot_ly(positive_counts, labels = ~FillType, values = ~Count, type = 'pie', textinfo = 'label+percent') %>%
layout(title = "Positive Gap Fill Percentage Distribution")
# Create a pie chart for negative gaps
negative_pie <- plot_ly(negative_counts, labels = ~FillType, values = ~Count, type = 'pie', textinfo = 'label+percent') %>%
layout(title = "Negative Gap Fill Percentage Distribution")
# Combine the two plots into one
subplot(positive_pie, negative_pie, nrows = 1, shareX = TRUE, shareY = TRUE)
positive_pie
