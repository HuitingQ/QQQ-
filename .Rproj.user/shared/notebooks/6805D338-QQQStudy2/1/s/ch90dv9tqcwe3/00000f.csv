"0","# Load required libraries"
"0","library(data.table)"
"0","library(plotly)"
"0","library(purrr)"
"0","library(readr)"
"0","library(magrittr)"
"0","library(tidyr)"
"0","library(dplyr)"
"0",""
"0","folder_path <- ""G://trading/QQQ/"""
"0","rds_file <- ""G://trading/QQQ/all_data.rds"""
"0",""
"0","# Check if the RDS file exists"
"0","if (file.exists(rds_file)) {"
"0","  # Load data from RDS file"
"0","  all_data <- readRDS(rds_file)"
"0","} else {"
"0","  # Get all CSV files in the folder"
"0","  all_files <- list.files(path = folder_path, pattern = ""\\.csv$"", full.names = TRUE)"
"0","  "
"0","  # Read and merge all CSV files"
"0","  all_data <- map_df(all_files, read_csv)"
"0","  "
"0","  # Save the merged data to an RDS file for future use"
"0","  saveRDS(all_data, rds_file)"
"0","}"
"0",""
"0","# 将 all_data 转换为 data.table 对象"
"0","all_data <- as.data.table(all_data)"
"0",""
"0","# 使用data.table语法过滤特定时间范围内的数据"
"0","all_data <- all_data[hour(Timestamp) >= 9 & (hour(Timestamp) < 16 | (hour(Timestamp) == 16 & minute(Timestamp) == 0))]"
"0",""
"0","# 排序"
"0","setorder(all_data, Timestamp)"
"0",""
"0","# Calculate daily data"
"0","daily_data <- all_data[, list("
"0","  Open = Open[1],"
"0","  High = max(High),"
"0","  Low = min(Low),"
"0","  Close = Close[.N]"
"0","), by = .(Date = as.Date(Timestamp))]"
"0",""
"0","# Calculate the gap and gap fill percentage"
"0","daily_data <- daily_data %>%"
"0","  mutate("
"0","    Gap = lead(Close) - Open,"
"0","    GapSizePercentage = (Gap / lead(Close)) * 100,"
"0","    GapFillPercentage = case_when("
"0","      Gap > 0 ~ (Low - Open) / Gap * 100,"
"0","      Gap < 0 ~ (High - Open) / abs(Gap) * 100,"
"0","      TRUE ~ NA_real_"
"0","    ),"
"0","    GapType = case_when("
"0","      Gap > 0 ~ ""Positive Gap"","
"0","      Gap < 0 ~ ""Negative Gap"","
"0","      TRUE ~ NA_character_"
"0","    ),"
"0","    FillType = case_when("
"0","      abs(GapFillPercentage) >= 100 ~ ""Fill >= 100%"","
"0","      abs(GapFillPercentage) < 100 ~ ""Fill < 100%"","
"0","      TRUE ~ NA_character_"
"0","    )"
"0","  ) %>%"
"0","  filter(!is.na(GapType), !is.na(FillType))"
"0",""
"0","# Separate data for positive and negative gaps"
"0","positive_gaps <- daily_data[Gap > 0, ]"
"0","negative_gaps <- daily_data[Gap < 0, ]"
"0",""
"0","# Count the occurrences of each fill type for positive gaps"
"0","positive_counts <- positive_gaps %>%"
"0","  group_by(FillType) %>%"
"0","  summarise(Count = n())"
"0",""
"0","# Count the occurrences of each fill type for negative gaps"
"0","negative_counts <- negative_gaps %>%"
"0","  group_by(FillType) %>%"
"0","  summarise(Count = n())"
"0",""
"0","# Create a pie chart for positive gaps"
"0","positive_pie <- plot_ly(positive_counts, labels = ~FillType, values = ~Count, type = 'pie', textinfo = 'label+percent') %>% "
"0","  layout(title = ""Positive Gap Fill Percentage Distribution"")"
"0",""
"0","# Create a pie chart for negative gaps"
"0","negative_pie <- plot_ly(negative_counts, labels = ~FillType, values = ~Count, type = 'pie', textinfo = 'label+percent') %>% "
"0","  layout(title = ""Negative Gap Fill Percentage Distribution"")"
"0",""
"0","# Combine the two plots into one"
"0","subplot(positive_pie, negative_pie, nrows = 1, shareX = TRUE, shareY = TRUE)"
